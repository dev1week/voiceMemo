# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    paths:
      - 'Backend/**'
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'corretto'
        
    - name: Make application.yml
      env:
        APPLICATION_YML: ${{ secrets.APPLICATION_YML }}
        APPLICATION_YML_DIR: Backend/src/main/resources
        APPLICATION_YML_NAME: application.yml
      run: echo $APPLICATION_YML | base64 --decode > $APPLICATION_YML_DIR/$APPLICATION_YML_NAME
      shell: bash

    - name: Run chmod to make gradlew executable
      run: chmod +x ./Backend/gradlew
      
    - name: Build with Gradle
      run: |
           cd Backend
           ./gradlew bootJar


    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
         
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        file: Backend/Dockerfile
        push: true
        tags: ${{secrets.DOCKER_REPO}}/ssoc:latest
        platforms: |
          linux/arm64    
          linux/amd64

    - name: executing remote ssh commands using password
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ubuntu
        key: ${{ secrets.KEY }}
        script: |
          sudo docker rm -f $(docker ps -qa)
          sudo docker pull ${{ secrets.DOCKER_REPO }}/ssoc
          docker-compose up -d
          docker image prune -f   
